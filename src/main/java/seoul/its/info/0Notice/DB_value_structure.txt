-- 사용되는 DB = MySQL 8
CREATE TABLE users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT, -- 유저 고유 번호 (NOT NULL 이지만 AUTO_INCREMENT는 명시 안 해도 됨)
    login_id VARCHAR(100) NOT NULL UNIQUE, -- 로그인 ID
    password VARCHAR(255) NOT NULL, -- 단방향 암호화 저장
    password_updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    name VARCHAR(50) NOT NULL,
    nickname VARCHAR(50) NOT NULL UNIQUE,
    gender CHAR(1), -- ENUM(N/M/F) 가능
    email VARCHAR(100) UNIQUE,
    email_verified TINYINT DEFAULT 0,
    email_verified_at DATETIME,
    phone_number VARCHAR(255) NOT NULL UNIQUE, -- 암호화 될 값 길이 고려해서 여유있게 줘야하니 255로 줌
    birth DATE,
    phone_provider VARCHAR(20),
    phone_verified BOOLEAN NOT NULL,
    phone_verified_at DATETIME NOT NULL,
    phone_ci VARCHAR(255) UNIQUE,
    phone_di VARCHAR(255) UNIQUE,
    address_postcode VARCHAR(10),
    address_base VARCHAR(255),
    address_detail VARCHAR(255),
    role TINYINT NOT NULL DEFAULT 1, -- 관리자는 100부터, 1=일반 회원
    login_fail_count INT NOT NULL DEFAULT 0,
    last_login_at DATETIME,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    agreement_age TINYINT NOT NULL,
    agreement_age_ver VARCHAR(10),
    agreement_service TINYINT NOT NULL,
    agreement_service_ver VARCHAR(10),
    agreement_privacy TINYINT NOT NULL,
    agreement_privacy_ver VARCHAR(10),
    agreement_alba TINYINT,
    agreement_alba_ver VARCHAR(10),
    agreement_marketing TINYINT,
    agreement_marketing_ver VARCHAR(10),
    agreement_benefits TINYINT,
    agreement_benefits_ver VARCHAR(10),
    is_deactivated TINYINT DEFAULT 0, -- 비활성 유저 여부
    deactivated_by TINYINT, -- 비활성 사유. 다만, 비영리+유저 1천면 미만일 경우 법적으로 미접속 휴면, 탈퇴 처리 등의 의무 없음
    deactivated_reason VARCHAR(255),
    is_deleted TINYINT DEFAULT 0, -- 탈퇴 유저 여부
    deleted_by TINYINT, -- 자발적 탈퇴 or 강제 탈퇴 여부 (0=유저 본인, 1=어드민 이런 식으로 사용할 예정)
    deleted_at DATETIME, -- 탈퇴한 or 된 시기
    deleted_keep_until DATETIME, --
    is_suspended TINYINT DEFAULT 0
);

CREATE TABLE boards (
    id BIGINT PRIMARY KEY AUTO_INCREMENT, -- 게시판의 idx
    name VARCHAR(255) NOT NULL, -- 게시판 이름 (공지사항, 자유게시판, Q&A 등등)
    description VARCHAR(500), -- 게시판 설명
    category_code TINYINT, -- 카테고리 번호 공지사항 0, 자유게시판 1, 질문 답변 2 등등 정의해야됨 일단 기본값 0
    is_active TINYINT DEFAULT 0, -- 사용 중인 게시판인지? 0이면 100이상만 접근 가능하도록 해서 관리자 전용 게시판 구분값으로 쓰면 좋을 듯
    write_role TINYINT DEFAULT 0, -- 글쓰기 가능 레벨 기준 (공지사항은 어드민 레벨 100부터 된다던지 등)
    read_role TINYINT DEFAULT 1, -- 읽기 가능 레벨 기준 (0 = 미회원, 1 = 회원, above 100 = 관리자 게시판 등)
    is_anonymous TINYINT DEFAULT 0, -- 익명 게시판 여부 (0 = false, 1 = true)
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- 게시판 생성 시간
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- 게시판 정보 업데이트 시간
    updated_by BIGINT, -- 게시판 정보 업데이트한 사용자 idx
    FOREIGN KEY (updated_by) REFERENCES users(id)
);

CREATE TABLE posts (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    board_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100),
    writer VARCHAR(100), -- 특별한 경우 아니면 users테이블의 nickname이 들어감
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    view_count INT DEFAULT 0,
    comment_count INT DEFAULT 0,
    like_count INT DEFAULT 0,
    report_count INT DEFAULT 0,
    is_notice TINYINT DEFAULT 0,
    is_anonymous TINYINT DEFAULT 0,
    is_blinded TINYINT DEFAULT 0,
    is_deleted TINYINT DEFAULT 0,
    no_reply TINYINT DEFAULT 0,
    file_included TINYINT DEFAULT 0, -- 파일 첨부 여부, 인덱싱 용도 & 분기 구분 용도
    image_included TINYINT DEFAULT 0, -- 이미지 첨부 여부
    writer_role TINYINT NOT NULL, -- 작성 당시 사용자의 role, role 변경 되더라 글 수정 전 변경 안함
    thumbnail_path VARCHAR(500),
    report_status TINYINT DEFAULT 0, -- 신고 상태 0 미신고, 1신고됨 2처리중 3처리완료(변화 없음) 4처리완료(카테고리 이동) 5처리완료(삭제) 등등으로 표시 예정
    ip_address VARCHAR(50),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (board_id) REFERENCES boards(id),
    FOREIGN KEY (writer) REFERENCES users(nickname),
    FOREIGN KEY (login_id) REFERENCES users(login_id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE post_viewers (
	post_id BIGINT NOT NULL,
	user_id BIGINT NOT NULL,
	view_time DATETIME DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (post_id, user_id),
	FOREIGN KEY (post_id) REFERENCES posts(id),
	FOREIGN KEY (user_id) REFERENCES users(id)
);

-- INSERT INTO post_viewers (post_id, user_id, view_time)
-- VALUES (현재_게시글_ID, 현재_사용자_ID, NOW())
-- ON DUPLICATE KEY UPDATE
--   view_time = IF(view_time < (NOW() - INTERVAL 24 HOUR), NOW(), view_time);
-- MySQL에서 삽입=1, 수정=2 값 반환 = view_count +1, 0 반환 = view_count 변화 없음
-- 24시간당 1조회수 허용 시 사용할 방법

-- INSERT IGNORE INTO post_viewers (post_id, user_id, view_time)
-- VALUES (현재_게시글_ID, 현재_사용자_ID, NOW());
-- 조회수 절대 값만 사용할 경우 (조회수 증가는 1회만 가능하며 rows는 1반환 됨. 중복 시 IGNORE로 인해 rows 값 0 반환 됨.)

CREATE TABLE comments (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    post_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100),
    writer VARCHAR(100),
    like_count INT DEFAULT 0,
    content TEXT NOT NULL,
    is_parent TINYINT DEFAULT 0, -- 댓글인지 대댓글인지 구분
    parent_comment_id BIGINT,
    post_writer_only TINYINT DEFAULT 0, -- 원글 작성자(post_writer)만 볼 수 있는지 여부. 대댓글로는 불가
    post_writer_id BIGINT, -- 원글(포스트) 작성자의 idx값.
    is_anonymous TINYINT DEFAULT 0, -- 원 글이 비밀글일 경우 댓글도 비밀댓글만 가능, 원 글이 비밀글이 아닐 경우 댓글도 비밀글 설정 불가능
    is_blinded TINYINT DEFAULT 0,
    is_deleted TINYINT DEFAULT 0,
    deleted_by_post_status TINYINT DEFAULT 0,
    image_included TINYINT DEFAULT 0, -- 이미지 첨부 여부. 댓글에서는 이미지만 업로드 가능하도록 할 예정
    writer_role VARCHAR(50),
    report_status TINYINT DEFAULT 0,
    ip_address VARCHAR(50),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_comment_id) REFERENCES comments(id),
    FOREIGN KEY (login_id) REFERENCES users(login_id),
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (writer) REFERENCES users(nickname),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (post_writer_id) REFERENCES users(id),
);

CREATE TABLE deleted_posts (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    board_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100),
    writer VARCHAR(100), -- 특별한 경우 아니면 users테이블의 nickname이 들어감
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    view_count INT DEFAULT 0,
    comment_count INT DEFAULT 0,
    like_count INT DEFAULT 0,
    report_count INT DEFAULT 0,
    is_notice TINYINT DEFAULT 0,
    is_anonymous TINYINT DEFAULT 0,
    is_blinded TINYINT DEFAULT 0,
    is_deleted TINYINT DEFAULT 0,
    file_included TINYINT DEFAULT 0, -- 파일 첨부 여부, 인덱싱 용도 & 분기 구분 용도도
    image_included TINYINT DEFAULT 0,
    writer_role TINYINT NOT NULL, -- 작성 당시 사용자의 role, role 변경 되더라 글 수정 전 변경 안함
    thumbnail_path VARCHAR(500),
    report_status TINYINT DEFAULT 0, -- 신고 상태 0 미신고, 1신고됨 2처리중 3처리완료(변화 없음) 4처리완료(카테고리 이동) 5처리완료(삭제) 등등으로 표시 예정
    ip_address VARCHAR(50),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    deleted_at TIMESTAMP, -- 삭제된 시간. 삭제는 updated_at을 수정하지 않고 삭제 당시 정보 그대로 이관함. 대신 삭제 시간을 이 컬럼에 기록
    deleted_by_user_id BIGINT, -- 삭제한 사용자 idx
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id),
);

CREATE TABLE deleted_comments (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    post_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100),
    nickname VARCHAR(100),
    content TEXT NOT NULL,
    parent_comment_id BIGINT,
    is_anonymous TINYINT DEFAULT 0,
    is_blinded TINYINT DEFAULT 0,
    is_deleted TINYINT DEFAULT 0,
    deleted_by_post_status TINYINT DEFAULT 0,
    image_included TINYINT DEFAULT 0,
    writer_role VARCHAR(50),
    report_status TINYINT DEFAULT 0,
    ip_address VARCHAR(50),
    created_at TIMESTAMP,
    updated_at TIMESTAMP, -- 원본 그대로 가져오기 때문에 updated_at, created_at 갱신 하지 않음음
    deleted_at TIMESTAMP NULL, -- 삭제된 시간. 삭제는 updated_at을 수정하지 않고 삭제 당시 정보 그대로 이관함. 대신 삭제 시간을 이 컬럼에 기록
    deleted_by_user_id BIGINT, -- 삭제한 사용자 idx
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id),
);

CREATE TABLE post_histories (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    post_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100),
    nickname VARCHAR(100),
    title VARCHAR(255), -- 변경 전 타이틀 기록
    content TEXT, -- 변경 전 내용 기록 = 현재 남은 글과 변경 내용 모두 남김
    action_type TINYINT, -- 0=작성, 1=수정, 2=첨부파일 삭제, 3=첨부파일 추가, 등등 글 삭제는 deleted_posts 테이블로 이동동
    writer_role TINYINT, -- 수정 전 사용자 role
    file_name VARCHAR(255), -- 첨부파일 이름 (히스토리에 내용이 없다면 수정할 때 새로 첨부한 것, 여러 파일은 콤마로 구분)
    file_path VARCHAR(255), -- 첨부파일 경로
    file_size VARCHAR(30), -- 첨부파일 용량
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    history_by TINYINT -- 누구에 의해 생성된 히스토리인지 기록 0=작성자, 1=관리자 등등..
);

CREATE TABLE comment_histories (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    comment_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100),
    nickname VARCHAR(100),
    content TEXT,
    action_type TINYINT,
    writer_role TINYINT NOT NULL,
    file_name VARCHAR(255), -- 첨부파일 이름 (히스토리에 내용이 없다면 수정할 때 새로 첨부한 것, 여러 파일은 콤마로 구분)
    file_path VARCHAR(255), -- 첨부파일 경로
    file_size VARCHAR(30), -- 첨부파일 용량
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    history_by TINYINT
);

CREATE TABLE post_likes (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    post_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100),
    nickname VARCHAR(100),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE KEY plu (post_id, user_id) -- 인덱스 및 중복 좋아요 방지용 유니크 조합 설정 (post liked user=plu)
);

CREATE TABLE comment_likes (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    comment_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100),
    nickname VARCHAR(100),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (comment_id) REFERENCES comments(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE KEY clu (comment_id, user_id) -- 인덱스 및 중복 좋아요 방지용 유니크 조합 설정
);

CREATE TABLE board_reports ( -- 게시판 통합 신고 테이블
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    post_id BIGINT NOT NULL, -- 신고 당한 포스트
    comment_id BIGINT NULL, -- 신고 당한 코멘트, 없다면 포스트id가 신고 당한 것 있다면 포스트id의 코멘트id가 신고 당한 것
    user_id BIGINT NOT NULL, -- 신고한 유저
    login_id VARCHAR(100),
    nickname VARCHAR(100),
    reason VARCHAR(255),
    action_type TINYINT NOT NULL, -- 게시글 신고는 0, 댓글 신고는 1 쿼리 단순화, 인덱싱을 위한 장치
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (comment_id) REFERENCES comments(id)
);

-- 게시글 신고 조회
-- SELECT * FROM board_reports WHERE action_type = 0;

-- 댓글 신고 조회
-- SELECT * FROM board_reports WHERE action_type = 1 AND comment_id IS NOT NULL;

CREATE TABLE contacts (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    login_id VARCHAR(100),
	name VARCHAR(50) NOT NULL,
    email VARCHAR(255),
    phone_num VARCHAR(255),
    contact_subject VARCHAR(255) NOT NULL,
    contact_message TEXT NOT NULL,
    send_by_user TINYINT DEFAULT 0,
    file_included TINYINT DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (login_id) REFERENCES users(login_id),
);

CREATE TABLE files (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    post_id BIGINT, -- 포스트 아이디만 있을 경우 포스트에 첨부된 파일
    comment_id BIGINT, -- 코멘트 아이디만 있을 경우 포스트가 아닌 코멘트에 첨부된 파일(이미지만 가능)
    contact_id BIGINT, -- 컨택트에 포함된 파일
    service_id BIGINT, -- 게시판이 아닌 다른 서비스에서 올라오는 파일이 있을 경우 추가 가능
    upload_from TINYINT NOT NULL, -- 0 = 포스트, 1 = 코멘트, 2= 다른 서비스 등등.. 인덱싱 용도
    user_id BIGINT, -- 업로더 idx
    login_id VARCHAR(100), -- 업로더 로그인 id
    original_name VARCHAR(255), -- 파일 본래 이름
    saved_name VARCHAR(255), -- 서버에 저장되는 이름(파일 이름 정규식이 있다면 맞게 수정된 이름)
    is_image TINYINT,
    file_path VARCHAR(500),
    file_size VARCHAR(50),
    file_type VARCHAR(100), -- 파일 확장자
    risk_level TINYINT NOT NULL DEFAULT 0, -- 0=safe, 1=suspicious, 2=Danger, 3=UnKnown(Admin은 virustotal 패스하고 올림)
    uploader_ip_address VARCHAR(50),
    is_deleted TINYINT DEFAULT 0, -- 삭제 여부, 삭제 파일 관리 시 인덱싱 여부
    upload_by_anonymous TINYINT DEFAULT 0,
    count INT, -- 다운로드 횟수
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (comment_id) REFERENCES comments(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (login_id) REFERENCES users(login_id),
    FOREIGN KEY (contact_id) REFERENCES contacts(id)
);

CREATE TABLE file_histories (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    post_id BIGINT NOT NULL,
    comment_id BIGINT,
    user_id BIGINT NOT NULL,
    login_id VARCHAR(100), -- 히스토리 생성 당시 유저 아이디, 유저 삭제 될 경우 대비한 컬럼
    file_path VARCHAR(500),
    file_size BIGINT,
    file_type VARCHAR(100),
    action_type TINYINT, -- 최초 첨부는 여기 기록되지 않음 해당 서비스 내에서 글 작성 시, 혹은 수정을 통한 첨부는 histories에서 확인 가능
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    history_by TINYINT,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (comment_id) REFERENCES comments(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE file_downloaders (
	file_id BIGINT NOT NULL,
	user_id BIGINT NOT NULL,
	download_from VARCHAR(50) NOT NULL, -- 다운로드 받은 서비스
	the_id BIGINT, -- 해당 서비스의 idx 값 download_from+the_id로 다운로드 된 서비스 및 위치 확인
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (file_id) REFERENCES files(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

----------------------------------------
-- **참고 및 설계 의도**
-- 각 테이블 내에 쓰이는 id는 고유번호를 뜻하며 다른 테이블에서 참조 시 단수형 테이블명_id 로 표시한다 (boards 내에서는 id, 외부에서는 board_id)
-- user_id(FK)는 항상 참조용으로 사용, user_id/nickname 등은 작성/수정/삭제 당시 값으로 같이 저장(조회·이력·감사용).
-- 삭제하는 post or comment 의 경우, deleted_...로 이동하기 전 updated_at 값을 수정하지 않고, deleted_at 값을 기록한다.
-- board의 경우 post만 board_id를 참조하도록 하고 나머지 comment, files 등은 post나 서비스 id값을 참조한다. (files는 comment_id 를 참조 할 수도 있음음)
-- 예: board_id는 post에서 사용, 나머지 테이블은 post_id(comment는 comment_id)로 참조.
-- 모든 user 관련 FK는 user_id로 통일함
-- join이 필요할 때는 user_id로 users 테이블과 조인, 빠른 조회나 이력 보존에는 user_id/nickname or login_id 등 컬럼을 사용하거나 인덱스 활용
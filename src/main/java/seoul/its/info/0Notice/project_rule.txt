1. DB_value_structure.txt 에 설계된 테이블, 컬럼 값을 value에 맞추는 방향을 지향합니다.
(예시: 내부에서 사용되는 value는 loginId 같은 식으로 변경 하더라도 post는 백엔드와 동일하게 login_id로 보냄)
(백엔드에서도 컴파일러 인식 등의 문제로 login_id(원본)을 LoginId 등으로 변경 할 수 있겠지만 UserId 등으로 일관성을 버리면 안됨)

2. Controller, Dto, Service(interface), ServiceImpl(class), Mapper(@ 어노테이션 선호 중)을 기본 구조로
2개 이상의 동일한 형식의 파일이 사용될 경우 가급적 패키지(폴더) 하위에 배치합니다.
(예: aservice/AServiceRequestDto.java, AServiceResponseDto.java = X aservice/dto/.. = O)

3. 모든 서비스 구성 요소는 사용자의 다양한 요구 변칙적 접근 + 사용자의 이해할 수 없지만 발생 가능한 이상 접근 등을 고려하여 작업합니다. (고의성 이상접근 포함)

4. 사용자의 개인 정보는 본인을 제외, 최소한의 공개를 목표로 작업합니다. (ex. 아이디를 찾을 수 없습니다. or 비밀번호가 틀렸습니다. = X, 로그인 정보가 일치하지 않습니다. = O)
(로그는 가급적 상세히 기록하나 사용자는 몰라야하며, 이 응답의 기준은 표시되는 응답이 아닌 탈취될 수 있음을 가정한 프론트로 전달되는 모든 값의 기준임.)

5. 예외 발생을 가정하더라도 서비스가 멈추지 않도록 서비스를 고안합니다.
(예외 발생으로 인해 예외 메시지 및 예외 표시 페이지로 이동 시킬 지언정 Json 파일 노출, 기본 화이트 라벨 에러 페이지 노출 등은 지양)

6. 완성된 서비스의 warning은 IDE의 인식 오류로 생기는 부분을 제외하고 모두 제거합니다. (unused, never used 등등)

7. 컴파일 에러가 난 상태로 commit, push하지 않습니다. 만약, 완성이 안 된 상황에서의 push는 이후 작업을 위해 컴파일 에러 주석 처리 후 push합니다.

8. 작업에 앞서 pull, 작업이 끝난 뒤 push는 기본 중의 기본입니다.

9. 공통 설정 파일, Security 등은 추가 시 반드시 팀에 알리며, 작업 중 삭제가 필요할 경우 팀에 문의 혹은 작업 중 로컬에서 해제 후 commit 전에 원복 해둡니다.

10. Exception 처리는 common/exception 내의 핸들러를 우선으로 하며, 특정 서비스에 커스텀 된 Exception 정의가 필요할 경우 등록 후 팀에 알립니다.

11. 프론트의 post 요청은 모두 csrf 헤더를 포함해야 합니다. csrf는 static/js/commonUtils/csrf-utils.js 를 통해 컨트롤 되며, base.jsp의 input에 기록되고 있습니다.

12. 외부 서비스 연동에 필요한 API-KEY세트는 resources/properties/application-API-KEY.properties에 저장되어 있습니다.

13. 서비스 완료는 반드시 localhost 상에서 구동하여 테스트를 통해 이상 없을 경우에만 커밋하며, 최종 구성은 localhost가 아닌 122.48... 서버에서 작동할 것을 기준으로 작업해야 합니다.

14. SOLID >= DRY 원칙으로 작업합니다.

15. 네이밍 규칙 =
패키지(폴더)명은 소문자로 작성합니다. (컴파일 단 대/소문자 구분 없는 경우가 있음) **DB는 반드시 스네이크 케이스로 작성**

복수형/단수형/controller, service... 등으로 작성 권장. 현재 boards/posts/, boards/comments/ 적용함, user/login을 users 패키지로 변경 예정.

(공통 = 메서드명은 카멜케이스(이하 케이스 생략), 변수명 카멜 > 스네이크 > 하이브리드, 중요도가 매우 높은 변수나 메서드의 경우 전체 대문자 또는 대문자+스네이크 하이브리드)
(백엔드 파일명은 파스칼, 프론트엔드 파일명은 소문자, 케밥)
helloWorld = 카멜, HelloWorld = 파스칼, hello-world = 케밥, hello_world = 스네이크, Hello_world = 카멜+스네이크 하이브리드, Hello-World = 파스칼+케밥 하이브리드

**메서드 명은 약어로 등록하지 말고 귀찮고 길어지더라도 리뷰 편의성을 위해 전체 단어 나열형, 혹은 문장형으로 작성합시다**

16. 공통 모듈 및 파일 정리 (...등이 아닌 현재 있는 모듈 전체를 기록합니다.)
#보안 = common/security/ 스프링부트 시큐리티(로그인, 로그아웃 관리, csrf 설정, 접근 제한 설정 등등)
Xss필터, Bycrypt En(De)coder, AES En(De)coder, 무제한 대입 공격 방어(/useranomaly), virustotal 파일 체커

#설정 = config/CommonConfig.java
인터셉터와 리소스는 모두 CommonConfig에 정의되어 있음. 내용이 길어질 경우 클래스 분리 가능.

#파일 = common/util/file/ 현재 upload만 구현. 업로드 되는 모든 파일 이력관리를 위한 DB연동. virustotal 통해 risk factor를 정의하도록 설계됨.
현재 virustotal은 무료 플랜이라 1분당 4개의 파일까지만 검사 가능함. 공통 규칙을 application.properties에 정의하려 했으나
서비스 마다 사용될 용량이나 허용 파일 등이 달라질 수 있어서 각 클래스 별로 할당하도록 설계됨.

**다만 현재는 동기 방식이라 이후 Async 어노테이션과 Future, CompletableFuture 등으로 반환 타입을 변경해야 된다는 ai의 조언이 있었음..**
**파일 서버를 남는 컴퓨터에 설정하는 방안도 고려해야됨. (회선은 같지만, 프로젝트 설계 시 고려를 했고, 구현을 했다는 자체에 초점을 둠)**

download 구현 계획 - 단순 파일의 링크 제공이 아닌, 프론트엔드에서 csrf헤더를 포함한 요청을 보내면 백엔드에서는 횟수와 시간 제한이 있는
암호화된 혹은 난수로 생성된 링크를 제공하여 다운로드가 이뤄지도록 만들어서 타 서비스에서의 다운로드, 무제한 다운로드 공격 등에 대비할 예정.
단순 링크 파일이 아닌 게시판에 포함되는 이미지나 썸네일 등은 모두 csrf 요청을 통해서만 뷰에 보내지도록 구성해서 외부 사용 제한 예정.
모든 설정은 application.properties나 커스텀 프로퍼티를 통해 관리하도록 해야함. **비동기 방식, 파일 서버 통한 구현도 고려해야됨**

#기타 = resources/com/json
욕설 및 비속어 리스트(정규식에 활용), tlds.json (정식 도메인 리스트), geng-lang-client...(구글 API용 토큰 Json인데 다시 받아야됨)
resources/mapper/*.xml
현재 어노테이션으로 DB컨트롤 중이라 사용하지 않고 있음. 아마 boards 서비스 안에서는 들어갈 쿼리가 엄청나게 많아질 거라서 xml 사용이 고려돼야함.

#상수 = 자주 쓰이는 고정 값은 common/constant 내에 정의. 필요할 경우 정의해서 사용
현재는 UserRole 기준값으로 관리자 레벨 100만 적어둠.

17. 어떤 경우의 문제든 1시간 이내로 해결하지 못하는 발생 시 팀장 또는 팀원에게 공유하여 빠르게 해결을 목표로 합니다.

18. 코드 리뷰 및 승인은 팀장에게 보고하고 팀장은 본인 작업 보다 리뷰 및 승인을 우선 시 해야 됩니다.

19. merge는 main/origin을 우선 시 하지만 그 보다 해당 conflicts의 당사자들끼리 소통을 우선해야 합니다. (깃허브 요금제 안 써서 merge 전 request 강제가 안 됨)

20. commit 메시지 특히 summary 표준화 방안은 추후 논의할 필요가 있어 보임

21. 모든 세션은 스프링 Security가 관리해야 하는 게 표준 & 현업 실무에 적합하며 보안에 훨씬 뛰어나다 하여 변경 강행했습니다.
user/login/LoginSuccesHanlder, common/security/SecurityConfig.java 를 통해서 스프링 부트 자체 관리 세션에 값이 기록되며, 해당 값을 요청하는 방식으로 접근 제어를 하도록 변경되어야 합니다.

22. Get 요청은 JSP, Post요청은 vue로 처리하는 하이브리드 방식 강제.
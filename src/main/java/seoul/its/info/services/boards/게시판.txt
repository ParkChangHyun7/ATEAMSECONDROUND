게시판 만들기

1. 글쓰기, 읽기, 수정, 삭제 기능이 있는 게시판 CRUD 우선 구현.

댓글, 대댓글, 신고, 좋아요, 기능은 추후 구현.

게시판이라는 공통 모듈이 있고, 여러 게시판이 해당 모듈을 사용함
공통 모듈에는 게시판 쓰기 권한, 읽기 권한, 카테고리, 게시판 이름, 게시판 설명, 페이지 네이션 방식 등등을 담아 처리한다. (DB설계 참고)
(읽기 권한, 쓰기 권한, 카테고리, 게시판 이름 등을 프론트로 보내주면 프론트에서는 그에 맞춰서 페이지 구성(게시판 접근 및 리스트 출력 유무, 버튼 노출 유무)등을 결정함. 읽기 권한이 없는 유저가 허용되지 않은 방법을 이용해 프론트에서 백엔드로 요청을 넣더라도 백엔드는 거부 해야됨.)
(프론트에서 목록에 불러올 글 갯수를 담아서 요청하면 그 숫자에 맞춰서 페이지네이션이 결정됨)
(미니멈 20개로 요청하고, 최대 100개까지 요청 가능. 20개 미만은 20개로, 100개 초과는 백엔드에서 100개까지만 처리 반환함)
(제목 글자 수 등에 대한 처리는 프론트에서 결정함.)

1페이지 기준 프론트는 아래 컬럼들을 글 목록(리스트)에서 이용하게 됨.
title, writer, view_count, comment_count, like_count, is_notice, is_blinded, is_secret, file_included, image_included, created_at
[좋아요 수] 제목 [댓글 수], 작성자, 작성일
is_notice 체크된 글 + 20개의 일반 글을 표시함(is_blinded는 한 줄에 블라인드 처리된 글 입니다. 외에 다른 정보 없음)


좋아요와 신고는 하나의 모듈로 게시판, 댓글 양쪽에 모두 적용 가능한 형태로 제작.
조회수 증복 증가 방지는 조회수 절대값이 필요한 경우 DB를 이용해서 user_id+post_id 매칭을 통해 view_count 증가를 결정하고 이외의 경우는 인 쿠키 이용 24시간에 1회 조회수 적용한다.
좋아요는 DB에 기록하여 여러번 좋아요를 통한 어뷰징을 방지하고, UNIQUE KEY인 plu를 통해 좋아요 여부를 확인하여 토글 방식으로 버튼을 보여준다.
댓글도 똑같지만 clu를 통해 확인한다.

